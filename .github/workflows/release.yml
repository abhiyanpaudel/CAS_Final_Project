name: Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:11.7.1-devel-ubuntu22.04
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y cmake git build-essential mpich libmpich-dev python3 python3-pip wget
        pip3 install numpy
    
    - name: Setup environment variables
      run: |
        echo "Setting up environment variables for dependencies"
        echo "INSTALL_ROOT=$GITHUB_WORKSPACE/deps" >> $GITHUB_ENV
        mkdir -p $GITHUB_WORKSPACE/deps
    
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ runner.os }}-deps-release-${{ hashFiles('**/config.sh') }}
    
    - name: Build Kokkos
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        echo "Building Kokkos"
        cd $GITHUB_WORKSPACE
        git clone --depth 1 --branch develop https://github.com/kokkos/kokkos.git
        mkdir -p kokkos/build
        cd kokkos/build
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$INSTALL_ROOT/kokkos \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_BUILD_TYPE=Release \
          -DKokkos_ENABLE_SERIAL=ON \
          -DKokkos_ENABLE_OPENMP=ON \
          -DKokkos_ENABLE_CUDA=ON \
          -DKokkos_ENABLE_CUDA_LAMBDA=ON
        make -j$(nproc)
        make install
    
    - name: Build PETSc
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        echo "Building PETSc"
        cd $GITHUB_WORKSPACE
        git clone --depth 1 --branch release https://gitlab.com/petsc/petsc.git
        cd petsc
        ./configure --prefix=$INSTALL_ROOT/petsc --with-debugging=0 --with-cuda=1 --download-hypre=1 --download-fblaslapack=1
        make PETSC_DIR=$GITHUB_WORKSPACE/petsc PETSC_ARCH=arch-linux-c-opt all
        make PETSC_DIR=$GITHUB_WORKSPACE/petsc PETSC_ARCH=arch-linux-c-opt install
    
    - name: Build for release
      run: |
        echo "Building project for release"
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_C_COMPILER=mpicc \
          -DCMAKE_BUILD_TYPE=Release \
          -DKokkos_ROOT=$INSTALL_ROOT/kokkos \
          -DPETSC_DIR=$INSTALL_ROOT/petsc \
          -DPETSC_ARCH=arch-linux-c-opt
        make -j$(nproc)
    
    - name: Create binary archive
      run: |
        mkdir -p release
        cp build/point2MeshMapping release/
        cp -r create_mesh release/
        tar -czvf particle2mesh_map-linux.tar.gz release/
    
    - name: Upload release binary
      uses: actions/upload-artifact@v3
      with:
        name: particle2mesh_map-release
        path: particle2mesh_map-linux.tar.gz
    
    - name: Upload release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./particle2mesh_map-linux.tar.gz
        asset_name: particle2mesh_map-linux.tar.gz
        asset_content_type: application/gzip