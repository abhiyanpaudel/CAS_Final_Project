name: Particle2Mesh CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (leave empty for CI-only run)'
        required: false
        default: ''

jobs:
  # Main build and test job
  build-and-test:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for release notes generation
    
    - name: Debug environment
      run: |
        echo "Working directory: $(pwd)"
        echo "Repository directory: $GITHUB_WORKSPACE"
        echo "Contents of current directory:"
        ls -la
        echo "Environment variables:"
        env | sort
    
    - name: Set up environment and dependencies
      run: |
        echo "Setting up environment for dependencies"
        # Source configuration script
        if [ -f "$GITHUB_WORKSPACE/config.sh" ]; then
          echo "Using config.sh from repository"
          source $GITHUB_WORKSPACE/config.sh
        else
          echo "ERROR: config.sh not found!"
          exit 1
        fi
        
        # Export variables needed by subsequent steps
        echo "DEVICE_ARCH=${DEVICE_ARCH}" >> $GITHUB_ENV
        echo "SOURCE_DIR=${SOURCE_DIR}" >> $GITHUB_ENV
        echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
        echo "DEPENDENCY_DIR=${DEPENDENCY_DIR}" >> $GITHUB_ENV
        echo "PETSC_DIR=${PETSC_DIR}" >> $GITHUB_ENV
        echo "PETSC_ARCH=${PETSC_ARCH}" >> $GITHUB_ENV
      
    - name: Build project using config.sh
      run: |
        # Use your existing config.sh script to build the project
        if [ -f "./config.sh" ]; then
          source ./config.sh
        else
          source $GITHUB_WORKSPACE/config.sh
        fi
        # Add any build commands here if they're not already in config.sh
        
    - name: Run unit tests with CTest
      run: |
        cd build
        # Source environment to ensure tests can find dependencies
        if [ -f "../config.sh" ]; then
          source ../config.sh
        else
          source $GITHUB_WORKSPACE/config.sh
        fi
        ctest --output-on-failure -V
    
    # Basic validation tests
    - name: Run validation tests
      run: |
        cd build
        if [ -f "../config.sh" ]; then
          source ../config.sh
        else
          source $GITHUB_WORKSPACE/config.sh
        fi
        
        # Run the integration test with standard parameters
        ./point2MeshMap ../create_mesh/source_mesh/source_mesh.osh ../create_mesh/target_mesh/target_mesh.osh -mat_type aijkokkos -use_gpu_aware_mpi 0
        
        # Additional validation tests could be added here
        # Example: Test with different matrix types
        # ./point2MeshMap ../create_mesh/source_mesh/source_mesh.osh ../create_mesh/target_mesh/target_mesh.osh -mat_type aij -use_gpu_aware_mpi 0
        
        # Example: Test with different mesh sizes
        # If we have different test meshes:
        # ./point2MeshMap ../create_mesh/large_source_mesh/source_mesh.osh ../create_mesh/large_target_mesh/target_mesh.osh -mat_type aijkokkos -use_gpu_aware_mpi 0
        
    - name: Collect artifacts
      if: always()
      run: |
        mkdir -p artifacts
        # Copy executable
        cp build/point2MeshMap artifacts/ || true
        # Copy test results
        cp build/Testing/Temporary/LastTest.log artifacts/ || true
        # Copy any output files
        cp build/*.vtk artifacts/ || true
        
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: particle2mesh-artifacts
        path: artifacts/

  # Optional deployment job - only runs when explicitly triggered
  deploy:
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag != ''
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: particle2mesh-artifacts
        path: release-artifacts



